{% import '_includes/forms' as forms %}

{% macro tokenValue (token, key) -%}
	{%- if token is iterable and key in token|keys -%}
		{{- token[key] -}}
	{%- endif -%}
{%- endmacro %}
{% import _self as _ %}

<div class="spinner" id="simpleMapSpinner"></div>
<div id="simpleMap" style="display: none">

	{# === Map === #}

	<h2>{{ 'Map'|t('simplemap') }}</h2>

	{# --- Map: Tiles --- #}

	{# TODO: Add examples of the styles #}
	{{ forms.selectField({
		first: true,
		id: 'mapTiles',
		name: 'mapTiles',
		label: 'Map Tiles'|t('simplemap'),
		instructions: 'Select the style of map tiles.'|t('simplemap'),
		options: mapTileOptions,
		value: settings.mapTiles,
	})|replace('<select', '<select v-model="mapTiles"')|raw }}

	{# --- Map: Token --- #}

	{# TODO: Add instructions on how to get API keys for each service #}
	{% set mapTokenIterable = settings.mapToken is iterable %}

	<div v-if="mapTilesSimple">
		{{ forms.textField({
			name: 'mapToken',
			label: 'Map Token'|t('simplemap'),
			instructions: 'Add the API key for map tiles service you are using (leave blank if you\'re using an open source tile set).'|t('simplemap'),
			value: not mapTokenIterable ? settings.mapToken,
		}) }}
	</div>

	<div v-if="mapTiles.indexOf('mapkit') > -1">
		{{ forms.textareaField({
			name: 'mapToken[privateKey]',
			label: 'Private Key'|t('simplemap'),
			rows: 6,
			instructions: 'Paste the contents of your private key files below.'|t('simplemap'),
			value: _.tokenValue(settings.mapToken, 'privateKey'),
		}) }}

		{{ forms.textField({
			name: 'mapToken[keyId]',
			label: 'Key ID'|t('simplemap'),
			instructions: 'The ID of the key associated with your private key.'|t('simplemap'),
			value: _.tokenValue(settings.mapToken, 'keyId'),
		}) }}

		{{ forms.textField({
			name: 'mapToken[teamId]',
			label: 'Team ID'|t('simplemap'),
			instructions: 'The team ID that created the key ID and private key.'|t('simplemap'),
			value: _.tokenValue(settings.mapToken, 'teamId'),
		}) }}
	</div>

	<div v-if="mapTiles.indexOf('here') > -1">
		{{ forms.textField({
			name: 'mapToken[appId]',
			label: 'App ID'|t('simplemap'),
			instructions: 'Your Here app ID.'|t('simplemap'),
			value: _.tokenValue(settings.mapToken, 'appId'),
		}) }}

		{{ forms.textField({
			name: 'mapToken[appCode]',
			label: 'App Code'|t('simplemap'),
			instructions: 'Your Here app code.'|t('simplemap'),
			value: _.tokenValue(settings.mapToken, 'appCode'),
		}) }}
	</div>

	{# === Geo === #}

	<br>
	<h2>{{ 'Geo-Coding'|t('simplemap') }}</h2>

	{# --- Geo: Service --- #}

	{# TODO: Link to the services? #}
	{{ forms.selectField({
		id: 'geoService',
		name: 'geoService',
		label: 'Geo Service'|t('simplemap'),
		instructions: 'Select the service to be used for Geo-coding.'|t('simplemap'),
		options: geoServiceOptions,
		value: settings.geoService,
	}) |replace('<select', '<select v-model="geoService"')|raw}}

	{# --- Geo: Token --- #}

	{# TODO: Add instructions on how to get API keys for each service #}
	{% set geoTokenIterable = settings.geoToken is iterable %}

	<div v-if="geoServiceSimple">
		{{ forms.textField({
			name: 'geoToken',
			label: 'Geo Token'|t('simplemap'),
			instructions: 'Add the API key for the geo-coding service (leave blank if you\'re using an open source service)'|t('simplemap'),
			value: not geoTokenIterable ? settings.geoToken,
		}) }}
	</div>

	<div v-if="geoService.indexOf('mapkit') > -1">
		<div class="field">
			<div class="warning">
				<p style="display:inline-block;vertical-align:top">
					<strong>{{ 'Notice'|t('simplemap') }}</strong><br>
					{{ 'MapKit does not support individual address parts.'|t('simplemap') }}
				</p>
			</div>
		</div>

		{{ forms.textareaField({
			name: 'geoToken[privateKey]',
			label: 'Private Key'|t('simplemap'),
			rows: 6,
			instructions: 'Paste the contents of your private key files below.'|t('simplemap'),
			value: _.tokenValue(settings.geoToken, 'privateKey'),
		}) }}

		{{ forms.textField({
			name: 'geoToken[keyId]',
			label: 'Key ID'|t('simplemap'),
			instructions: 'The ID of the key associated with your private key.'|t('simplemap'),
			value: _.tokenValue(settings.geoToken, 'keyId'),
		}) }}

		{{ forms.textField({
			name: 'geoToken[teamId]',
			label: 'Team ID'|t('simplemap'),
			instructions: 'The team ID that created the key ID and private key.'|t('simplemap'),
			value: _.tokenValue(settings.geoToken, 'teamId'),
		}) }}
	</div>

	<div v-if="geoService.indexOf('here') > -1">
		{{ forms.textField({
			name: 'geoToken[appId]',
			label: 'App ID'|t('simplemap'),
			instructions: 'Your Here app ID.'|t('simplemap'),
			value: _.tokenValue(settings.geoToken, 'appId'),
		}) }}

		{{ forms.textField({
			name: 'geoToken[appCode]',
			label: 'App Code'|t('simplemap'),
			instructions: 'Your Here app code.'|t('simplemap'),
			value: _.tokenValue(settings.geoToken, 'appCode'),
		}) }}
	</div>

</div>

{% do craft.app.view.registerAssetBundle('craft\\web\\assets\\vue\\VueAsset') %}
{% js %}
new Vue({
	el: '#content',
	data () {
		return {
			mapTiles: '{{ settings.mapTiles }}',
			geoService: '{{ settings.geoService }}',
		};
	},
	mounted () {
		document.getElementById('settings-simpleMapSpinner').style.display = 'none';
		document.getElementById('settings-simpleMap').style.display = 'block';
	},
	computed: {
		mapTilesSimple () {
			return (
				this.mapTiles.indexOf('mapkit') === -1 &&
				this.mapTiles.indexOf('here') === -1
			);
		},
		geoServiceSimple () {
			return (
				this.geoService.indexOf('mapkit') === -1 &&
				this.geoService.indexOf('here') === -1
			);
		}
	}
});
{% endjs %}